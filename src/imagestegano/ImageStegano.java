/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagestegano;

import data.CustomIndexColorModel;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.MenuEvent;
import javax.swing.event.MenuListener;
import steganography.PlanewiseBit;
import steganography.Bitwise_XOR1;
import steganography.Color_Map2;
import steganography.Image_Processing;
import utility.ImageUse;

import com.drew.imaging.ImageMetadataReader;
import com.drew.metadata.Directory;
import com.drew.metadata.Metadata;
import com.drew.metadata.Tag;
import java.awt.Dimension;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


/**
 *
 * @author neetu anuj lakshay
 *
 */
public class ImageStegano extends javax.swing.JFrame {

    BufferedImage baseimage;
    BufferedImage newimage;
    ImageUse imguse;
    PlanewiseBit plane1;
    File fileopened;
    Bitwise_XOR1 xor1;
    Color_Map2 map1;
    
    // pixel size of original image
    int pixsiz;
    
    /**
     * value of indx - 
 [-8, -1] all plane where -8 is MSB and -1 is LSB
 [0, 7] blue plane where 0 is MSB and 7 is LSB 
 [8, 15] green plane where 8 is MSB and 15 is LSB 
 [16, 23] red plane
 if alpha channel is present then [0, 7] alpha plane, 0 is MSB and
 all other planes is shifted by one byte
 color model is ABGR or BGR (in byte array)
     */
    int indx;
    
    // negative index will be used for all plane PlanewiseBit 
    int minindx;
    
    // value of mapindx - [0, 7] for 8 different colour maps
    int mapindx;
    
    // value of xorindx [1, 28] (4 * 4 + 4 * 3)
    // see mapping method in Bitwise_XOR1.java
    int xorindx;
    
    CustomIndexColorModel customIndexColorModelObject;
    IndexColorModel customIndexColorModels[];
    int othersIndex;
    Image_Processing imgmanip;
    BufferedImage baseimg;
    BufferedImage finimage;
    File coverImageFile;
    
    /**
     * Creates new form ImageStegano
     */
    public ImageStegano() {
        baseimage = null;
        newimage = null;
        imguse = new ImageUse();
        plane1 = new PlanewiseBit();
        indx = -9;
        mapindx = -1;
        xorindx = 0;
        xor1 = new Bitwise_XOR1();
        map1 = new Color_Map2();
        
        
        minindx = -8;
        
        customIndexColorModelObject = new CustomIndexColorModel();
        customIndexColorModels = 
                customIndexColorModelObject.getIndexColorModelArray();
        othersIndex = 0;
        imgmanip = new Image_Processing();
        baseimg = null;
        finimage = null;
        
        initComponents();
        
        // customizing threshold menu (no menu item)
        thresholdMenu.addMenuListener(new MenuListener() {

            @Override
            public void menuSelected(MenuEvent e) {
                showThresholdFrame();
            }

            @Override
            public void menuDeselected(MenuEvent e) {
            }

            @Override
            public void menuCanceled(MenuEvent e) {
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        buttonGroup1 = new javax.swing.ButtonGroup();
        hideImageFrame = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        chooseSourceImageButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        chooseTargetImageButton = new javax.swing.JButton();
        coverImageLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        hideImageButton = new javax.swing.JButton();
        targetImageLabel = new javax.swing.JLabel();
        imageHideMethodComboBox = new javax.swing.JComboBox();
        imageEncryptionComboBox = new javax.swing.JComboBox();
        encryptionLabel = new javax.swing.JLabel();
        encryptionTextField = new javax.swing.JTextField();
        resetSelectionButton = new javax.swing.JButton();
        thresholdFrame = new javax.swing.JFrame();
        currentValueLabel = new javax.swing.JLabel();
        thresholdSlider = new javax.swing.JSlider();
        currentThresholdLabel = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        bitPlaneRadioButton = new javax.swing.JRadioButton();
        colourMapRadioButton = new javax.swing.JRadioButton();
        bitwiseXORRadioButton = new javax.swing.JRadioButton();
        othersRadioButton = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        thresholdMenu = new javax.swing.JMenu();
        hideDataMenu = new javax.swing.JMenu();
        hideImageMenuItem = new javax.swing.JMenuItem();
        hideTextMenuItem = new javax.swing.JMenuItem();
        analyzeMenu = new javax.swing.JMenu();
        metaDataMenuItem = new javax.swing.JMenuItem();
        extractTextMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Choose an image");
        fileChooser.setFileFilter(new imagestegano.ImageFileFilter());

        hideImageFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        hideImageFrame.setTitle("Hide Image");

        jLabel1.setText("Choose carrier Image");

        chooseSourceImageButton.setText("choose");
        chooseSourceImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseSourceImageButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Choose iimage to hide");

        chooseTargetImageButton.setText("choose");
        chooseTargetImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseTargetImageButtonActionPerformed(evt);
            }
        });

        coverImageLabel.setForeground(new java.awt.Color(140, 56, 104));

        jLabel4.setText("Select method");

        jLabel3.setText("Select Encryption option");

        hideImageButton.setText("Hide Image");
        hideImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideImageButtonActionPerformed(evt);
            }
        });

        targetImageLabel.setForeground(new java.awt.Color(140, 56, 104));

        imageHideMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0th bit plane", "1st bit plane", "2nd bit plane", "3rd bit plane" }));

        imageEncryptionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Encryption", "Invert Bits", "Bitwise XOR with upper bits" }));
        imageEncryptionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageEncryptionComboBoxActionPerformed(evt);
            }
        });

        encryptionLabel.setText("No Encryption");

        encryptionTextField.setEditable(false);

        resetSelectionButton.setText("Reset ");
        resetSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetSelectionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hideImageFrameLayout = new javax.swing.GroupLayout(hideImageFrame.getContentPane());
        hideImageFrame.getContentPane().setLayout(hideImageFrameLayout);
        hideImageFrameLayout.setHorizontalGroup(
            hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideImageFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hideImageFrameLayout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(encryptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(encryptionLabel)
                            .addGroup(hideImageFrameLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(39, 39, 39)
                                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                                        .addComponent(chooseSourceImageButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(coverImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                                        .addComponent(chooseTargetImageButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(targetImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hideImageButton)
                            .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)))
                        .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(hideImageFrameLayout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(imageEncryptionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(imageHideMethodComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(132, 132, 132))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hideImageFrameLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetSelectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(108, 108, 108))))
                    .addGroup(hideImageFrameLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        hideImageFrameLayout.setVerticalGroup(
            hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hideImageFrameLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(chooseSourceImageButton))
                    .addComponent(coverImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(chooseTargetImageButton)
                    .addComponent(targetImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imageEncryptionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(imageHideMethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptionLabel)
                    .addComponent(encryptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(hideImageFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hideImageButton)
                    .addComponent(resetSelectionButton))
                .addContainerGap())
        );

        thresholdFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        thresholdFrame.setTitle("Threshold (Histogram)");

        currentValueLabel.setText("Current Value:");

        thresholdSlider.setMaximum(255);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        currentThresholdLabel.setText("50");

        javax.swing.GroupLayout thresholdFrameLayout = new javax.swing.GroupLayout(thresholdFrame.getContentPane());
        thresholdFrame.getContentPane().setLayout(thresholdFrameLayout);
        thresholdFrameLayout.setHorizontalGroup(
            thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresholdFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentValueLabel)
                .addGap(39, 39, 39)
                .addComponent(currentThresholdLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(thresholdSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        thresholdFrameLayout.setVerticalGroup(
            thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresholdFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(thresholdFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentValueLabel)
                    .addComponent(currentThresholdLabel))
                .addGap(31, 31, 31)
                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ImageStegano Tool");
        setName("ImageStegano"); // NOI18N

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        previousButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                previousButtonKeyReleased(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        nextButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nextButtonKeyReleased(evt);
            }
        });

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(imageLabel);

        nameLabel.setText("Press Ctrl + O to open a file.");

        buttonGroup1.add(bitPlaneRadioButton);
        bitPlaneRadioButton.setSelected(true);
        bitPlaneRadioButton.setText("Bit Plane");

        buttonGroup1.add(colourMapRadioButton);
        colourMapRadioButton.setText("Colour Map");
        colourMapRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colourMapRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(bitwiseXORRadioButton);
        bitwiseXORRadioButton.setText("Bitwise XOR");

        buttonGroup1.add(othersRadioButton);
        othersRadioButton.setText("Others");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bitPlaneRadioButton)
                        .addGap(54, 54, 54)
                        .addComponent(colourMapRadioButton)
                        .addGap(54, 54, 54)
                        .addComponent(bitwiseXORRadioButton)
                        .addGap(51, 51, 51)
                        .addComponent(othersRadioButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bitPlaneRadioButton)
                    .addComponent(colourMapRadioButton)
                    .addComponent(bitwiseXORRadioButton)
                    .addComponent(othersRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        thresholdMenu.setText("Threshold");
        jMenuBar1.add(thresholdMenu);

        hideDataMenu.setText("Hide content");

        hideImageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        hideImageMenuItem.setText("Hide Image");
        hideImageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideImageMenuItemActionPerformed(evt);
            }
        });
        hideDataMenu.add(hideImageMenuItem);

        hideTextMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        hideTextMenuItem.setText("Hide Text");
        hideTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hideTextMenuItemActionPerformed(evt);
            }
        });
        hideDataMenu.add(hideTextMenuItem);

        jMenuBar1.add(hideDataMenu);

        analyzeMenu.setText("Analyze");

        metaDataMenuItem.setText("Meta Data");
        metaDataMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaDataMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(metaDataMenuItem);

        extractTextMenuItem.setText("Extract Text");
        extractTextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractTextMenuItemActionPerformed(evt);
            }
        });
        analyzeMenu.add(extractTextMenuItem);

        jMenuBar1.add(analyzeMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addGap(143, 143, 143))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextButton)
                    .addComponent(previousButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileChooser.setDialogTitle("Select an image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileopened = fileChooser.getSelectedFile();
            String name = fileopened.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isImage(name)) {
                    baseimage = ImageIO.read(fileopened);
                    
                    // will initialize pixsiz variable
                    System.out.println("Original Image Info:");
                    printImageInfo(baseimage);
                    
                    // converting original image to suitable type
                    newimage = imguse.convertImage(baseimage);
                    if (newimage != null) {
                        baseimage = newimage;
                        System.out.println("Converted Image Info:");
                        
                        // will ovverride pixsiz variable
                        printImageInfo(baseimage);
                    }
                    
                    imageLabel.setIcon(new ImageIcon(baseimage));
                    nameLabel.setText("Normal Image. Use Next " + 
                            "and previous key to navigate.");
                } else {
                    alert("Please select an image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (bitPlaneRadioButton.isSelected()) {
            if (indx <= minindx) {
                indx = pixsiz;
               //System.out.println("index of image is "+indx);
            }
            indx--;
            manipulateImage();
        } else if (bitwiseXORRadioButton.isSelected()) {
            if (xorindx <= 1) {
                xorindx = 29;
            }
            xorindx--;
            applyBitwiseXOR();
        } else if (colourMapRadioButton.isSelected()) {
            if (mapindx <= 0) {
                mapindx = 8;
            }
            mapindx--;
            applyColourMap();
        } else if (othersRadioButton.isSelected()) {
            if (othersIndex <= 1) {
                othersIndex = 3;
            }
            othersIndex--;
            otherManipulations();
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void previousButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_previousButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_previousButtonKeyReleased

    private void nextButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_nextButtonKeyReleased

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (bitPlaneRadioButton.isSelected()) {
            if (indx >= pixsiz - 1) {
                indx = minindx - 1;
            }
            indx++;
            manipulateImage();
        } else if (bitwiseXORRadioButton.isSelected()) {
            if (xorindx >= 28) {
                xorindx = 0;
            }
            xorindx++;
            applyBitwiseXOR();
        } else if (colourMapRadioButton.isSelected()) {
            if (mapindx >= 7) {
                mapindx = -1;
            }
            mapindx++;
            applyColourMap();
        } else if (othersRadioButton.isSelected()) {
            if (othersIndex >= 2) {
                othersIndex = 0;
            }
            othersIndex++;
            otherManipulations();
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if (newimage == null) {
            return;
        }
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = fileopened.getName();
        String newFileName = imguse.getNewFileName(oldFileName);
        String path = fileopened.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imguse.isImage(name)) {
                imguse.saveImage(newimage, file);
            } else {
                alert("Invalid file name");
            }
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void hideImageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideImageMenuItemActionPerformed
        hideImageFrame.setBounds(0, 0, 450, 320);
        hideImageFrame.setVisible(true);
    }//GEN-LAST:event_hideImageMenuItemActionPerformed

    private void hideImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideImageButtonActionPerformed
        if (baseimg == null) {
            alert("Please select cover image");
            return;
        }
        if (finimage == null) {
            alert("Please select an image to hide");
            return;
        }
        int lsb = imageHideMethodComboBox.getSelectedIndex();
        int encryption = imageEncryptionComboBox.getSelectedIndex();        

        // No encryption
        if (encryption == 0) {
            plane1.hideImage(baseimg, finimage, lsb, false);
        } else if (encryption == 1) {
            // invert bits
            plane1.hideImage(baseimg, finimage, lsb, true);
        } else if (encryption == 2) {
            // Bitwise XOR with upper bits
            try {
                int upperBit = Integer.parseInt(encryptionTextField.getText());
                if (upperBit >= 4 && upperBit <= 7) {
                    plane1.hideImage(baseimg, finimage, lsb, upperBit);
                } else {
                    alert("Enter upper bit between 4 to 7 both inclusive");
                    return;
                }
            } catch(Exception e) {
                alert("Enter upper bit between 4 to 7 both inclusive");
                return;
            }
        }
        saveSteganoImage(baseimg, coverImageFile);
    }//GEN-LAST:event_hideImageButtonActionPerformed

    private void chooseSourceImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseSourceImageButtonActionPerformed
        fileChooser.setDialogTitle("Select a cover image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileopened = coverImageFile = fileChooser.getSelectedFile();
            String name = fileopened.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isPNGOrBMPImage(name)) {
                    baseimg = ImageIO.read(fileopened);
                    
                    // converting cover image to suitable type
                    BufferedImage temp = imguse.convertImage(baseimg);
                    
                    if (temp != null) {
                        baseimg = temp;
                    }
                    coverImageLabel.setText(name + ", size: " + 
                            fileopened.length() / 1024 + " KB, " +
                            baseimg.getWidth() + "X" +
                            baseimg.getHeight());
                } else {
                    alert("Please select only .png or .bmp image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        printResizeImageInfo();
        
    }//GEN-LAST:event_chooseSourceImageButtonActionPerformed

    private void chooseTargetImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseTargetImageButtonActionPerformed
        fileChooser.setDialogTitle("Select the target image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fileopened = fileChooser.getSelectedFile();
            String name = fileopened.getName();
            try {
                ImageFileFilter imageFilter = new ImageFileFilter();
                if (imageFilter.isImage(name)) {
                    finimage = ImageIO.read(fileopened);
                    
                    // converting cover image to suitable type
                    BufferedImage temp = imguse.convertImage(finimage);
                    
                    if (temp != null) {
                        finimage = temp;
                    }
                    targetImageLabel.setText(name + ", size: " + 
                            fileopened.length() / 1024 + " KB, " +
                            finimage.getWidth() + "X" +
                            finimage.getHeight());
                } else {
                    alert("Please select an image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        printResizeImageInfo();
    }//GEN-LAST:event_chooseTargetImageButtonActionPerformed

    private void imageEncryptionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageEncryptionComboBoxActionPerformed
        String selectedItem = 
                imageEncryptionComboBox.getSelectedItem().toString();
        if (selectedItem.equals("Bitwise XOR with upper bits")) {
            encryptionLabel.setText("Which upper bit (between 4-7)?");
            encryptionTextField.setEditable(true);
        } else if (selectedItem.equals("Invert Bits")) {
            encryptionLabel.setText("Bits will be inverted");
            encryptionTextField.setEditable(false);
        } else if (selectedItem.equals("No Encryption")) {
            encryptionLabel.setText("No Encryption");
            encryptionTextField.setEditable(false);
        }
    }//GEN-LAST:event_imageEncryptionComboBoxActionPerformed

    private void resetSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetSelectionButtonActionPerformed
        baseimg = null;
        finimage = null;
        coverImageLabel.setText(null);
        targetImageLabel.setText(null);
    }//GEN-LAST:event_resetSelectionButtonActionPerformed

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        int value = (int) thresholdSlider.getValue();
        currentThresholdLabel.setText((String.valueOf(value)));
        newimage = imguse.copyImage(baseimage);
        newimage = imguse.thresholdImage(newimage, value);
        imageLabel.setIcon(new ImageIcon(newimage));
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void metaDataMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaDataMenuItemActionPerformed
        if (fileopened == null) {
            return;
        }
        try {
            Metadata metadata = ImageMetadataReader.readMetadata(fileopened);
            String metaData = "";
            for (Directory directory : metadata.getDirectories()) {
                for (Tag tag : directory.getTags()) {
                    metaData += tag + "\n";
                }
            }
            alert(metaData, "Meta Data");
            System.out.println("Courtesy: " + 
                    "https://github.com/drewnoakes/metadata-extractor");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_metaDataMenuItemActionPerformed

    private void hideTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hideTextMenuItemActionPerformed
        new HideText().setVisible(true);
    }//GEN-LAST:event_hideTextMenuItemActionPerformed

    private void extractTextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractTextMenuItemActionPerformed
        new GetMessage().setVisible(true);
    }//GEN-LAST:event_extractTextMenuItemActionPerformed

    private void colourMapRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colourMapRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_colourMapRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageStegano().setVisible(true);
            }
        });
    }
    
    private void applySinglePlaneBPCS() {
        if (baseimage != null) {
            newimage = imguse.copyImage(baseimage);
            plane1.singlePlane(newimage, indx, pixsiz);
            imageLabel.setIcon(new ImageIcon(newimage));
            int bitPlaneCode = indx / 8;
            String bitPlaneName = "Alpha";
            
            // checking if alpha channel is absent
            if (pixsiz <= 24) {
                bitPlaneCode += 1;
            }
            switch(bitPlaneCode) {
                case 1: 
                    bitPlaneName = "Blue";
                    break;
                case 2:
                    bitPlaneName = "Green";
                    break;
                case 3:
                    bitPlaneName = "Red";
                    break;
            }
            nameLabel.setText(bitPlaneName + " plane: " + 
                    (7 - (indx % 8)) + "th bit");
        }
    }
    
    private void manipulateImage() {
        if (indx >= 0) {
            applySinglePlaneBPCS();
        } else if (indx >= minindx) {
            applyAllPlaneBPCS();
        }
    }
    
    private void applyAllPlaneBPCS() {
        if (baseimage != null) {
            newimage = imguse.copyImage(baseimage);
            plane1.allPlane(newimage, indx, pixsiz);
            imageLabel.setIcon(new ImageIcon(newimage));
            nameLabel.setText("All plane: " + ((indx * -1) - 1) + "th bit");
        }
    }
    
    private void applyBitwiseXOR() {
        if (baseimage != null) {
            newimage = imguse.copyImage(baseimage);
            xor1.xor(newimage, xorindx, pixsiz, nameLabel);
            imageLabel.setIcon(new ImageIcon(newimage));
        }
    }
    
    private void printImageInfo(BufferedImage image) {
        System.out.println("Image Type: " + image.getType());
        ColorModel colorModel = image.getColorModel();
        pixsiz = colorModel.getPixelSize();
        System.out.println("Pixel size: " + pixsiz);
        System.out.println("Alpha channel present: "
                + colorModel.hasAlpha());
    }
    
    private void applyColourMap() {
        if (baseimage != null) {
            newimage = imguse.copyImage(baseimage);
            newimage = map1.changeColourMap(newimage, 
                    customIndexColorModels[mapindx]);
            if (newimage != null) {
                nameLabel.setText("Colour Map: " + mapindx);
                imageLabel.setIcon(new ImageIcon(newimage));
            } else {
                nameLabel.setText("Not an indexed image");
            }
        }
    }
    
    private void otherManipulations() {
        if (baseimage == null) {
            return;
        }
        newimage = imguse.copyImage(baseimage);
        switch (othersIndex) {
            case 1: {
                imgmanip.convertToGrayscale(newimage);
                nameLabel.setText("Grayscale");
                break;
            }
            case 2: {
                imgmanip.invertImage(newimage, pixsiz);
                nameLabel.setText("Inverted");
                break;
            }
        }
        imageLabel.setIcon(new ImageIcon(newimage));
    }
    
    private void alert(String message) {
        JOptionPane.showMessageDialog(null, message);
    }
    
    private void saveSteganoImage(BufferedImage steganoImage, 
            File steganoImageFile) {
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = steganoImageFile.getName();
        String newFileName = imguse.getNewFileName(oldFileName);
        String path = steganoImageFile.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imguse.isImage(name)) {
                imguse.saveImage(steganoImage, file);
            } else {
                alert("Invalid file name");
            }

        }
    }
    
    private void showThresholdFrame() {
        if (baseimage != null) {
            newimage = imguse.copyImage(baseimage);
            ColorModel colorModel = newimage.getColorModel();
            if (colorModel instanceof IndexColorModel) {
                nameLabel.setText("Not applicable for indexed image");
                return;
            }
            thresholdFrame.setBounds(0, 0, 400, 148);
            thresholdFrame.setVisible(true);
            newimage = imguse.thresholdImage(newimage, 50);
            imageLabel.setIcon(new ImageIcon(newimage));
        }
    }
    
    private void printResizeImageInfo() {
        if (baseimg != null && finimage != null) {
            int coverWidth = baseimg.getWidth();
            int coverHeight = baseimg.getHeight();
            int targetWidth = finimage.getWidth();
            int targetHeight = finimage.getHeight();
            if (coverWidth == targetWidth && coverHeight == targetHeight) {
                return;
            }
            alert("Dimensions not equal. Image(s) will be cropped");
            int requiredWidth = (coverWidth < targetWidth ? coverWidth :
                    targetWidth);
            int requiredHeight = (coverHeight < targetHeight ? coverHeight :
                    targetHeight);
            baseimg = 
                    imguse.cropImage(baseimg, requiredWidth, requiredHeight);
            finimage = 
                    imguse.cropImage(finimage, requiredWidth, requiredHeight);
            
        }
    }
    
    private void alert(String message, String title) {
        JTextArea textArea = new JTextArea(message);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, title,
                JOptionPane.INFORMATION_MESSAGE);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JRadioButton bitPlaneRadioButton;
    private javax.swing.JRadioButton bitwiseXORRadioButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton chooseSourceImageButton;
    private javax.swing.JButton chooseTargetImageButton;
    private javax.swing.JRadioButton colourMapRadioButton;
    private javax.swing.JLabel coverImageLabel;
    private javax.swing.JLabel currentThresholdLabel;
    private javax.swing.JLabel currentValueLabel;
    private javax.swing.JLabel encryptionLabel;
    private javax.swing.JTextField encryptionTextField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem extractTextMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu hideDataMenu;
    private javax.swing.JButton hideImageButton;
    private javax.swing.JFrame hideImageFrame;
    private javax.swing.JMenuItem hideImageMenuItem;
    private javax.swing.JMenuItem hideTextMenuItem;
    private javax.swing.JComboBox imageEncryptionComboBox;
    private javax.swing.JComboBox imageHideMethodComboBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem metaDataMenuItem;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JRadioButton othersRadioButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton resetSelectionButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JLabel targetImageLabel;
    private javax.swing.JFrame thresholdFrame;
    private javax.swing.JMenu thresholdMenu;
    private javax.swing.JSlider thresholdSlider;
    // End of variables declaration//GEN-END:variables
}
